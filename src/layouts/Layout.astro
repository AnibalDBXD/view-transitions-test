---
export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta name="view-transition" content="same-origin" />
		<title>{title}</title>
	</head>
	<body>
		<slot />
	</body>
</html>
<style is:global>
	html {
		font-family: system-ui, sans-serif;
		background-color: #F6F6F6;
	}
</style>

<script>
	// @ts-expect-error
	if (document.startViewTransition) {
		// @ts-expect-error
		window.navigation.addEventListener('navigate', (event) => {
			const toUrl = new URL(event.destination.url)

			if (location.origin !== toUrl.origin) return

			event.intercept({
				async handler () {
					const response = await fetch(toUrl.pathname)
					const text = await response.text()
					const [, data] = text.match(/<body>([\s\S]*)<\/body>/i)
						// @ts-expect-error
					document.startViewTransition(() => {
						document.body.innerHTML = data
						document.documentElement.scrollTop = 0
					})
				}
			})
		})
	}
</script>